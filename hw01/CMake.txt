
CMake란?
- CMake는 프로젝트의 빌드 프로세스를 관리하기 위해 다양한 플랫폼에서 사용할 수 있는 자동화 도구입니다.
- 소스 코드에 대한 설정과 빌드 구성을 생성하여, 다양한 플랫폼과 컴파일러에서 빌드할 수 있도록 지원합니다.

주요 기능
1. 플랫폼 독립성:
   - CMake는 Windows, macOS, Linux 등 다양한 운영 체제에서 사용할 수 있습니다.
   - 동일한 CMakeLists.txt 파일로 여러 플랫폼에서 빌드할 수 있게 해줍니다.

2. 다양한 빌드 시스템 지원:
   - CMake는 Makefile, Ninja, Visual Studio 프로젝트 파일 등 다양한 빌드 시스템을 지원합니다.
   - 원하는 빌드 시스템에 맞게 프로젝트를 생성할 수 있습니다.

3. 모듈화 지원:
   - CMake는 다양한 모듈을 지원하여 외부 라이브러리와의 통합을 쉽게 합니다.
   - `find_package()`와 같은 명령어를 사용하여 외부 라이브러리를 손쉽게 찾고 사용할 수 있습니다.

4. 유연한 설정:
   - CMake는 옵션을 통해 다양한 빌드 설정을 쉽게 조정할 수 있습니다.
   - `CMakeLists.txt` 파일에서 사용자 정의 변수를 설정하여 유연하게 구성할 수 있습니다.

5. 테스트 및 패키징:
   - CMake는 CTest와 CPack와 통합되어 테스트 및 패키징을 지원합니다.
   - 단위 테스트를 자동으로 수행하고, 배포를 위한 패키지를 생성할 수 있습니다.

CMake 사용 방법
1. CMake 설치:
   - 각 운영 체제에 맞는 패키지 매니저를 통해 CMake를 설치합니다.
     - 예: Ubuntu에서는 `sudo apt install cmake`로 설치할 수 있습니다.

2. CMakeLists.txt 파일 생성:
   - 프로젝트의 루트 디렉토리에 `CMakeLists.txt` 파일을 생성합니다.
   - 이 파일에는 프로젝트의 빌드 설정과 소스 파일, 라이브러리 등을 정의합니다.

   ```cmake
   cmake_minimum_required(VERSION 3.10)  # CMake 최소 버전 요구
   project(MyProject)                     # 프로젝트 이름 정의

   set(CMAKE_CXX_STANDARD 11)            # C++ 표준 설정

   add_executable(MyExecutable main.cpp)  # 실행 파일 정의
   ```

3. CMake 실행:
   - 터미널에서 프로젝트 디렉토리로 이동한 후, 빌드 디렉토리를 생성하고 CMake를 실행합니다.
   ```bash
   mkdir build
   cd build
   cmake ..
   ```
   - 이 명령은 상위 디렉토리(`..`)에 있는 `CMakeLists.txt` 파일을 읽어 빌드 구성을 생성합니다.

4. 빌드:
   - CMake가 생성한 빌드 시스템을 사용하여 프로젝트를 빌드합니다.
   ```bash
   make   # Makefile을 사용하는 경우
   ```

결론
CMake는 C/C++ 프로젝트의 빌드를 관리하는 강력하고 유연한 도구로, 플랫폼과 빌드 시스템에 독립적입니다. 
프로젝트 구조와 외부 라이브러리 관리, 빌드 설정을 간편하게 할 수 있어, 많은 개발자들이 선호하는 도구입니다. 
CMake를 사용하면 코드의 이식성과 유지보수성을 크게 향상시킬 수 있습니다.